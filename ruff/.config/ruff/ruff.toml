cache-dir = "~/.cache/ruff"

[lint]
select = [
    "F",        # Pyflakes
    "E",        # Pycodestyle errors (style issues)
    "W",        # Pycodestyle warnings (style issues)
    "C90",      # McCabe – complexity metric for functions
    "I",        # isort – import ordering checks
    "N",        # PEP8 Naming – naming conventions
    "D",        # Pydocstyle – docstring formatting
    # "DOC",    # Pydoclint – docstring linting and consistency
    "UP",       # Pyupgrade – upgrades syntax to newer Python versions
    "YTT",      # Flake8-2020 – checks for Python 2020 best practices
    # "ANN",      # Flake8-annotations – enforces type annotation style
    "ASYNC",    # Flake8-async – checks async/await usage
    "S",        # Flake8-bandit – security issues
    "BLE",      # Flake8-blind-except – flags bare excepts
    "FBT",      # Flake8-boolean-trap – potential pitfalls with booleans
    "B",        # Flake8-bugbear – common bug patterns
    "A",        # Flake8-builtins – misuse of Python built-in names
    "COM",      # Flake8-commas – trailing/comma issues
    "C4",       # Flake8-comprehensions – best practices in comprehensions
    "DTZ",      # Flake8-datetimez – requires timezone-aware datetime objects
    "T10",      # Flake8-debugger – debugger statements (e.g. pdb)
    "DJ",       # Flake8-django – Django-specific conventions
    "EM",       # Flake8-errmsg – error message style
    "EXE",      # Flake8-executable – executable file checks
    "FA",       # Flake8-future-annotations – future import for annotations
    "ISC",      # Flake8-implicit-str-concat – warns on implicit string concatenation
    "ICN",      # Flake8-import-conventions – enforces conventional import aliases
    "LOG",      # Flake8-logging – proper logging usage
    "G",        # Flake8-logging-format – logging format string issues
    "PIE",      # Flake8-pie – Python improvement suggestions
    "PYI",      # Flake8-pyi – checks for type stub (.pyi) consistency
    "PT",       # Flake8-pytest-style – pytest best practices
    "Q",        # Flake8-quotes – enforces quote style consistency
    "RSE",      # Flake8-raise – proper raise statement usage
    "RET",      # Flake8-return – return statement issues
    "SLF",      # Flake8-self – flags instance methods that don't use self
    "SLOT",     # Flake8-slots – suggests use of __slots__ where appropriate
    "SIM",      # Flake8-simplify – code simplification hints
    "TID",      # Flake8-tidy-imports – enforces specific import styles (e.g., no relative imports)
    "TC",       # Flake8-type-checking – proper import of typing in type checks
    "INT",      # Flake8-gettext – checks for proper internationalization usage
    "ARG",      # Flake8-unused-arguments – flags unused function arguments
    "PTH",      # Flake8-use-pathlib – encourages pathlib over os.path
    "FIX",      # Flake8-fixme – flags FIXME comments
    # "TD",       # Flake8-todos – flags TODO comments
    "PD",       # Pandas-vet – checks pandas-specific code practices
    "NPY",      # NumPy-specific rules – ensures NumPy coding standards
    "PGH",      # Pygrep-hooks – custom grep hooks for linting
    "PL",       # Pylint – integration with Pylint conventions
    "TRY",      # Tryceratops – try/except usage suggestions
    "FLY",      # Flynt – f-string conversion suggestions
    "FAST",     # FastAPI – FastAPI-specific linting rules
    "AIR",      # Airflow – Airflow-specific linting rules
    "PERF",     # Perflint – performance-related checks
    "FURB",     # Refurb – rules for code refurbishment
    "RUF",      # Ruff-specific rules – additional Ruff checks
]

ignore = [
    "D1",       # Pydocstyle - missing docstring in public module, class, or function
    "D203",     # Pydocstyle - one blank line required before class docstring
    "D212",     # Pydocstyle - summary line should be immediately after the opening quotes.
    "S311",     # Flake8-bandit - Standard pseudo-random generators are not suitable for security/cryptographic purposes
    "FA102",    # Flake8-future-annotations - Missing `from __future__ import annotations`, but uses PEP 604 union
    "E501",     # Pycodestyle - Line too long ({width} > {limit})
    "COM812",   # Flake8-commas - Checks for the absence of trailing commas (Let the formatter handle this)
]

[lint.per-file-ignores]
"__init__.py" = ["E402", "F401"]
